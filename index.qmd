---
title: "Title"
format:
  html:
    toc: true
    toc-location: left
    number-sections: true
    code-fold: true
    highlight-style: pygments
    fig-cap-location: top
    lightbox: auto
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

## Librairies

```{r message=FALSE, warning=FALSE}
rpkg <- c("dplyr ggplot2 readr boot divvy terra divDyn conflicted rgplates sf colorspace rgl
           icosa tidyr tibble purrr downloadthis ggpubr openxlsx")

import_pkg <- function(x)
  x |> trimws() |> strsplit("\\s+")  |> unlist() |> 
  lapply(function(x) library(x, character.only = T)) |> 
  invisible()

rpkg |> import_pkg()

# Resolve conflicted functions.
conflicted::conflict_prefer(name = "filter", winner = "dplyr",losers = "stats")
```

## Occurence data

Fossil occurrence data for Late Cretaceous (Campanian-Maastrichtian) and Paleocene (Danian-Thanetian) sharks were compiled using the primary literature and specimens from museum collections. Data processing mainly involved standardizing genus and species spelling. Unspecified species (i.e., sp) were not considered part of the analysis. We performed our analyses at both genus and species levels.The final cleaned occurrence dataset comprised **X** occurrences representing **X** species and **X** genera. Occurrence data were binned into chronostratigraphic ages.

```{r}
# Database.
Data <-
  read.xlsx(xlsxFile = "Data.xlsx") |> 
  filter(!Duplicate %in% c("x")) |> 
  filter(!View %in% c("oblique labial","oblique lingual")) |> 
  mutate(Locale = as.factor(Locale)) |> 
  mutate(Species = as.factor(Species)) |>
  # Synechodontiformes.
  mutate(Species = case_when(Species == "Synechodus cf. faxensis" ~ "Synechodus faxensis",
                             Species == "Sphenodus cf. lundgreni" ~ "Sphenodus lundgreni", TRUE ~ Species)) |> 
  # Heterodontiformes.
  mutate(Species = case_when(Species == "Heterodontus granti nov. sp." ~ "Heterodontus granti", TRUE ~ Species)) |> 
  # Squaliformes.
  mutate(Species = case_when(Species == "Microetmopterus wardi gen. et sp. nov." ~ "Microetmopterus wardi",
                             Species == "Squalus gabrielsoni sp. nov." ~ "Squalus gabrielsoni",
                             Species == "Squalus huntensis nov. sp." ~ "Squalus huntensis", 
                             Species == "Centrophoroides cf. appendiculatus" ~ "Centrophoroides appendiculatus",TRUE ~ Species)) |> 
  # Hexanchiformes.
  mutate(Species = case_when(Species == "Heptranchias howellii" ~ "Heptranchias howelli",
                             Species == "Notidanodon brotzeni sp. nov." ~ "Notidanodon brotzeni",
                             Species == "Hexanchus aff. microdon" ~ "Hexanchus microdon",
                             Species == "Notidanodon cf. loozi" ~ "Notidanodon loozi", TRUE ~ Species)) |> 
  # Orectolobiformes.
  mutate(Species = case_when(Species == "Pararhincodon groessenssi" ~ "Pararhincodon groessensi",
                             Species == "Plicatoscyllium antiquum nov. gen. nov. sp." ~ "Plicatoscyllium antiquum",
                             Species == "Plicatoscyllium cf globidens" ~ "Plicatoscyllium globidens",
                             Species == "Galagadon nordquistae n. gen. n. sp." ~ "Galagadon nordquistae",
                             Species %in% c("Plicatoscyllium derameei nov. gen. nov. sp.","Plicatoscyllium deramei") ~ "Plicatoscyllium derameei",
                             Species %in% c("Cantioscyllium cf. meyeri ","Cantioscyllium aff. C. meyeri","Cantioscyllium meyeri nov. sp.") ~ "Cantioscyllium meyeri",TRUE ~ Species)) |>
  # Lamniformes.
  mutate(Species = case_when(Species == "Carcharias cf. C. holmdelensis" ~ "Carcharias holmdelensis",
                             Species == "Squalicorax africanus nov sp." ~ "Squalicorax africanus",
                             Species == "Anomotodon noves" ~ "Anomotodon novus",
                             Species == "Squalicorax bassanii " ~ "Squalicorax bassanii",
                             Species == "Squalicorax pristodontus "  ~ "Squalicorax pristodontus",
                             Species == "Squalicorax benguerirensis nov. sp." ~ "Squalicorax benguerirensis",
                             Species == "speyeri" ~ "Odontaspis speyeri",
                             Species == "Odontaspis cf. winkleri" ~ "Odontaspis winkleri",
                             Species ==  "inflata" ~ "Isurolamna inflata",
                             Species == "obliquus" ~ "Otodus obliquus",
                             Species == "Squalicorax microserratus nov. sp." ~ "Squalicorax microserratus",
                             Species == "Cretolamna sp." ~ "Cretalamna sp.",
                             Species == "Lamna cuspidata" ~ "Carcharias cuspidatus", # Opinion of Hovestadt 2020.
                             Species == "Carcharias macrotus" ~ "Striatolamia macrota",
                             Species == "Odontaspis rutoti" ~ "Palaeohypotodus rutoti",  # Opinion of Ebersole et al. 2024.
                             Species == "Carcharodon orientalis" ~ "Palaeocarcharodon orientalis",
                             Species == "Anomotodon hermani sp. nov." ~ "Anomotodon hermani",
                             Species == "Squalicorax aff. S. lindstromi" ~ "Squalicorax lindstromi",
                             Species == "Archaeolamna kopingensis"  ~ "Archaeolamna kopingensis kopingensis",
                             Species == "Lamna biauriculata nigeriana nov. sub sp." ~ "Cretalamna nigeriana",
                             Species == "Cretalamna cf. C. borealis" ~ "Cretalamna borealis",
                             Species %in% c("Carcharias aff. C. tenuis" ,"tenuis") ~ "Carcharias tenuis",
                             Species %in% c("Squalicorax cf. S. yangaensis","Squalicorax aff. S. yangaensis") ~ "Squalicorax yangaensis",
                             Species %in% c("Anomotodon aff. A. plicatus","Anomotodon aff. plicatus") ~ "Anomotodon plicatus",
                             Species %in% c("Odontaspis bronni","Palaeohypotodus aff. bronni") ~ "Palaeohypotodus bronni",
                             Species %in% c("Cretalamna cf. C. biauriculata","Cretolamna biauriculata") ~ "Cretalamna biauriculata",
                             Species %in% c("Cretolamna cf. C. maroccana","Cretolamna maroccana") ~ "Cretalamna maroccana",
                             Species %in% c("Carcharias aff. gracilis","gracilis") ~ "Carcharias gracilis",
                             Species %in% c("Striatolamia cederstroemi sp. nov.","cederstroemi") ~ "Striatolamia cederstroemi",
                             Species %in% c("Cretolamna appendiculata", "Cretolamna sp. aff. Cretolamna appendiculata","Cretolamna cf. C. appendiculata") ~ "Cretalamna appendiculata",
                             Species %in% c("Cretalamna cf. C. sarcoportheta","Cretalamna sarcoportheta sp. nov.") ~ "Cretalamna sarcoportheta",
                             Species %in% c("Pseudocorax cf. P. affinis","Pseudocorax cf. affinis") ~ "Pseudocorax affinis",
                             Species %in% c("Anomotodon cf. A. toddi", "Anomotodon toddi nov. sp.") ~ "Anomotodon toddi",
                             Species %in% c("Carcharias cf. C. samhammeri", "Carcharias cf. samhammeri") ~ "Carcharias samhammeri",
                             Species %in% c("Carcharias cf. C. heathi", "Carcharias heathi nov. sp.") ~ "Carcharias heathi",TRUE ~ Species)) |>
  # Carcharhiniformes.
  mutate(Species = case_when(Species == "Paratriakis tenuis sp. nov." ~ "Paratriakis tenuis",
                             Species == "Palaeogaleus aff. faujasi" ~ "Palaeogaleus faujasi",
                             Species == "Galeorhinus gomphorhiza" ~ "Khouribgaleus gomphorhiza",
                             Species == "Scyliorhinus ivagrantae nov. sp." ~ "Scyliorhinus ivagrantae",
                             Species == "Squatigaleus grandjeani nov. sp." ~ "Squatigaleus grandjeani",
                             Species == "Squatigaleus carinatus nov. sp." ~ "Squatigaleus carinatus",
                             Species == "Scyliorhinus carinatus sp. nov." ~ "Premontreia carinatus",
                             Species == "Palaeogaleus navarroensis nov. sp." ~ "Palaeogaleus navarroensis",
                             Species == "Scyliorhinus aff. cabindensis" ~ "Scyliorhinus cabindensis",
                             Species == "Tingaleus dakkai n. gen. et nov. sp." ~ "Tingaleus dakkai",
                             Species %in% c("Galeorhinus aff. girardoti","Galeorhinus cf. G. girardoti") ~ "Galeorhinus girardoti",
                             Species %in% c("indet.","Triakidae gen. et sp. indet.") ~ NA,
                             Species %in% c("‘Scyliorhinus’ biddlei", "“Scyliorhinus“ biddlei") ~ "Scyliorhinus biddlei",
                             Species %in% c("‘Scyliorhinus’ elongatus","“Scyliorhinus” elongatus") ~  "Scyliorhinus elongatus", T ~  Species)) |>
  # Correct family designation.
  mutate(Family = case_when(Genus == "Palaeohypotodus" ~ "Jaekelotodontidae", T ~ Family))

# 51 occurrences from the Limhamn quarry that needs to be ID.

# Remove unspecified species.
remove_obs <- c("Squalicorax sp.","Squalicorax nov. sp. 2","Squalicorax nov. sp. 1",
                "Scyliorhinus sp. 1","Scyliorhinus sp. 2","Scyliorhinus sp. 2", "Scyliorhinus sp. 1",
                "Scapanorhynchus sp. 2","Scapanorhynchus sp. 1","Scapanorhynchus sp.","Protosqualus sp.",
                "Propristiophorus sp.","Plicatoscyllium sp.","Physogaleus sp.","Paratriakis sp.",
                "Pararhincodon sp.","Paraorthocodus sp.","Paraorthacodus sp.", "Paranomotodon sp.",
                "Palaeogaleus sp. B","Palaeogaleus sp.","Palaeobrachaelurus sp.","Odontaspis sp." ,"Notorynchus sp.",
                "Notidanodon sp.","Nebrius sp.","Megasqualus sp.","Isurolamna sp.","Hexanchus spp.","Hexanchus sp.",
                "Heterodontus sp. 2", "Heterodontus sp.","Heptranchias sp.","Gladioserratus sp.","Ginglymostoma sp.", 
                "Galeorhinus sp.","Foumtizia sp.","Echinorhinus sp.","Dalatias sp.","Cretalamna sp.","Cretalamna sp.", 
                "Columbusia sp.", "Chlamydoselachus sp.","Chiloscyllium sp.","Centrophorus sp.", "Carcharias sp.", "Brachycarcharias sp.",
                "Abdounia sp.","Woellsteinia sp.","Weltonia sp.","Triakis n. sp.","Squatina sp.","Squaliodalatias sp.",
                "sp. nov.","sp. nov. A","sp. nov. B", "Hemiscyllium sp.")

Data <- Data |> filter(!Species %in% remove_obs) # Ask Mikael to provide IDs for all Limhamn specimens. But remove for now.

# Final subset (remove occurrences with no species identification)
Data <-
  Data |> 
  filter(!is.na(Species)) |>
  filter(!is.na(Age.3)) |> 
  # Remove invalid taxa.
  filter(!Species %in% c("Palaeohypotodus rutori")) |>  # Not valid according (Ebersole et al. 2024).
  # Final corrections.
  mutate(Genus = case_when(Genus == "Cretolamna" ~ "Cretalamna",TRUE ~ Genus)) |> 
  mutate(Species = case_when(Species == "Isurolamna inflata" ~ "Isurolamna affinis", T ~ Species)
         ) |>  # (see Popov and Vladimir A. Lopyrev 2024).
  as.data.frame() |>
  # Remove columns.
  select(-c("Used","Duplicate","Not_Digitized")) # 2197 occurrences with species names.
```

## Paleocoordinates

We used the present-day coordinates (i.e. latitude and longitude) of fossil localities/areas to reconstruct their corresponding paleocoordinates. This was achieved using the `rgplates` v. 0.6.0 R package and we opted to use the midpoint of each chronostratigraphic intervals.

```{r}
age_split <- group_split(Data |> group_by(Age.3))

# Paleocoordinates.
campan_coords <- reconstruct(x = age_split[[1]][,19:20] |> relocate(Latitude,.after = "Longitude"),age = 77.75) # Campanian
maastr_coords <- reconstruct(x = age_split[[3]][,19:20] |> relocate(Latitude,.after = "Longitude"),age = 69)    # Maastrichtian
danian_coords <- reconstruct(x = age_split[[2]][,19:20] |> relocate(Latitude,.after = "Longitude"),age = 62.5)  # Danian-Selandian.
thanet_coords <- reconstruct(x = age_split[[4]][,19:20] |> relocate(Latitude,.after = "Longitude"),age = 57.5)  # Thanetian

# Append paleocoordinates.
spatial_data <-
  rbind(
  cbind(age_split[[1]],campan_coords),
  cbind(age_split[[3]],maastr_coords),
  cbind(age_split[[2]],danian_coords),
  cbind(age_split[[4]],thanet_coords)
) |> 
  # Add numeric stage variable.
  mutate(stg = NULL) |>
  mutate(stg = case_when(Age.3 == "Campanian" ~ "80",
                         Age.3 == "Maastrichtian" ~ "81",
                         Age.3 == "DanSelCombined" ~ "82",
                         Age.3 %in% c("Thanetian") ~ "83",T ~ Age.3)
  ) |> 
  mutate(stg = as.numeric(stg))
```

## Exploratory data analysis

```{r}
# Number of occurrences by country.
spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Country,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Country, y = n, fill = Age.3)) + 
  geom_col() +
  # scale_fill_manual(values = qualitative_hcl(4, palette = "Dark 3")) +
  scale_fill_manual(values =   c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  scale_colour_manual(values = c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  coord_flip() +
  labs(x = NULL, y = "Number of Occurrences", fill = "Chronostratigraphic age") +
  theme_bw() +
  theme(panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='gray50'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0,face = "bold"),
        aspect.ratio = 1,
        axis.text  = element_text(size = 8),
        axis.title = element_text(face = "bold"))

# Number of occurrences by source.
spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Source,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Source, y = n, fill = Age.3)) + 
  geom_col() +
  # scale_fill_manual(values = qualitative_hcl(4, palette = "Dark 3")) +
  scale_fill_manual(values =   c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  scale_colour_manual(values = c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  coord_flip() +
  labs(x = NULL, y = "Occurrences", fill = "Chronostratigraphic age") +
  theme_bw() +
  theme(panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='gray50'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0,face = "bold"),
        aspect.ratio = 1,
        axis.text  = element_text(size = 8),
        axis.title = element_text(face = "bold"))

# Number of occurrences by order.
spatial_data |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Order,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Order, y = n, fill = Order)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(x = NULL, y = "Sample Size") +
  facet_wrap(.~ Age.3, scales = "free") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 8),
        strip.text = element_text(face = "bold"),
        legend.position = "none",
        aspect.ratio = 1)

# Number of occurrences by species (divide into two plots)
spatial_data |> 
  filter(Superorder == "Galeomorphii") |> 
  filter(Order %in% c("Lamniformes","Carcharhiniformes")) |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  mutate(Order = factor(Order, levels = c("Lamniformes","Carcharhiniformes"))) |> 
  group_by(Species,Order,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Species, y = n, fill = Age.3)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values =   c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  scale_colour_manual(values = c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  coord_flip() +
  labs(x = NULL, y = "Sample Size", fill = "Chronostratigraphic age") +
  facet_wrap(.~ Order, scales = "free",ncol = 2) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 6),
        axis.text.y = element_text(face = "italic"),
        strip.text = element_text(hjust=0,face = "bold"),
        legend.position = "bottom",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 6),
        aspect.ratio = 1.5)

spatial_data |> 
  filter(Superorder == "Squalomorphii") |> 
  filter(!Order %in% c("Lamniformes","Carcharhiniformes")) |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Species,Order,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Species, y = n, fill = Age.3)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values =   c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  scale_colour_manual(values = c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +  
  coord_flip() +
  labs(x = NULL, y = "Sample Size") +
  facet_wrap(.~ Order, scales = "free",ncol = 2) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 6),
        axis.text.y = element_text(face = "italic"),
        strip.text = element_text(hjust=0,face = "bold"),
        legend.position = "bottom",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 6),
        aspect.ratio = 1.5)
```

Two questions are being asked:

1. How did the spatial structuring in community similarity change across the Maastrichtian-Danian boundary?
2. Turnover rates.

```{r}
species_list <- 
  spatial_data |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3) |> 
  summarise(Species = list(unique(Species))) |> 
  pull(Species)

names(species_list) <- c("Campanian","Maastrichtian","Danian-Selandian","Thanetian")

# Campanian versus Maastrichtian.
length(generics::intersect(x = species_list$Campanian,y = species_list$Maastrichtian))
# Campanian versus Danian-Selandian.
length(generics::intersect(x = species_list$Campanian,y = species_list$`Danian-Selandian`))
# Campanian versus Thanetian.
length(generics::intersect(x = species_list$Campanian,y = species_list$Thanetian))

# Maastrichtian versus Danian-Selandian
length(generics::intersect(x = species_list$Maastrichtian,y = species_list$`Danian-Selandian`))
# Maastrichtian versus Thanetian
length(generics::intersect(x = species_list$Maastrichtian,y = species_list$Thanetian))

# Danian-Selandian versus Thanetian
length(generics::intersect(x = species_list$`Danian-Selandian`,y = species_list$Thanetian))
```

## Cells

We first assigned fossil occurrences to equal-area spatial grid cells and retained only those with sufficient sampling (i.e., at a minimum occurrence-level of 20). First, the occurrence data were filtered to include only records from a specified geologic time-interval. Each occurrence was then assigned to a spatial grid cell using the `icosa v. 0.11.1` R package and a pre-defined hexagonal equal-area grid object. We calculated the number of occurrences per cell and retained only those with at least a minimum number of records to reduce the influence of undersampled areas. Finally, we extracted the geographic centroids of the retained cells and merged this information back into the dataset to support downstream spatial analysis.

At a minimum occurrences of 15, the interval with least number of cells is the Thanetian.

```{r message=FALSE, warning=FALSE, results='hide'}
# Set up the grid,
hexa <- hexagrid(deg = 3.5, sf = TRUE) # The mean grid edge length is 403.97 km or 3.63 degrees.

clean_spatial_data <-
  rbind(
  # Campanian.
  spatial_data |>
  filter(Age.3 == "Campanian") |> 
  mutate(cell = locate(x = hexa,y = spatial_data[spatial_data$Age.3 == "Campanian",] |> select("paleolong", "paleolat"))),
  # Maastrichtian.
  spatial_data |> 
  filter(Age.3 == "Maastrichtian") |> 
  mutate(cell = locate(x = hexa,y = spatial_data[spatial_data$Age.3 == "Maastrichtian",] |> select("paleolong", "paleolat"))), 
  # Danian/Selandian.
  spatial_data |> 
  filter(Age.3 == "DanSelCombined") |> 
  mutate(cell = locate(x = hexa,y = spatial_data[spatial_data$Age.3 == "DanSelCombined",] |> select("paleolong", "paleolat"))),
  # Thanetian.
  spatial_data |> 
  filter(Age.3 == "Thanetian") |> 
  mutate(cell = locate(x = hexa,y = spatial_data[spatial_data$Age.3 == "Thanetian",] |> select("paleolong", "paleolat")))
)

# Count occurrences per cell and age.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(cell,Age.3) |> count() |> 
  ggplot(aes(x = cell, y = n)) +
  geom_col() +
  facet_wrap(.~Age.3,scales = "free",nrow = 1) +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        panel.grid=element_line(linetype=3,linewidth=0.2),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0)
        )

# Filter.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(cell,Age.3) |> count() |> 
  arrange(desc(n)) |>
  filter(n >= 15) |>
  ggplot(aes(x = cell, y = n)) +
  geom_col() +
  geom_hline(yintercept = 15,colour = "#D83853") +
  labs(x = NULL, y = "Number of occurrences") +
  facet_wrap(.~Age.3,scales = "free",nrow = 1) +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='#53565A'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0)
        )

# Function used to filter, spatially bin, and enriching the data with cell metadata.
cell_preparation <- function(data,age,hexa,min_occ = NULL) {
  # Subset by age.
  data <- data |> filter(Age.3 == age)
  # Assign cell-units based on the coordinates.
  data <- data |> mutate(cell = icosa::locate(x = hexa,y = data |> select("paleolong","paleolat")))
  # Count occurrences per cell and filter by minimum occurrence.
  data <- 
    data |>
    group_by(cell) |>
    mutate(occs = n()) |> 
    ungroup() |> 
    filter(occs >= min_occ)
  
  # Retained cells.
  cells_to_keep <- unique(data$cell)
  cell_centroids <- 
    as.data.frame(centers(hexa))[cells_to_keep, , drop = FALSE] |>
    rownames_to_column(var = "cell")
  
  # Merge centroid-value.
  data <- data |> left_join(cell_centroids, by = "cell")
  
  return(data)
}

# Cell assignment and remove occurrence below the minimum thresh-hold.
campanian_cells <- cell_preparation(data = clean_spatial_data,age = "Campanian",hexa = hexa, min_occ = 15)
maastrich_cells <- cell_preparation(data = clean_spatial_data,age = "Maastrichtian",hexa = hexa,min_occ = 15) 
daniansel_cells <- cell_preparation(data = clean_spatial_data,age = "DanSelCombined",hexa = hexa,min_occ = 15)
thanetian_cells <- cell_preparation(data = clean_spatial_data,age = "Thanetian",hexa = hexa,min_occ = 15)

# Combine all data subsets.
clean_spatial_data <- bind_rows(campanian_cells,maastrich_cells,daniansel_cells,thanetian_cells) # 2053 specimens in total.
# Create unique identifier for each cell.
clean_spatial_data <-
  data.frame(unique(clean_spatial_data$cell)) |> # 23 unique cells.
  setNames(nm = "cell") |> 
  mutate(cell_id = c(1:length(cell))) |> 
  inner_join(clean_spatial_data, 
             by = "cell")

# Inspect.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(cell,Age.3) |> count() |> 
  ggplot(aes(x = cell, y = n)) +
  geom_col() +
  geom_hline(yintercept = 15,colour = "#D83853") +
  labs(x = NULL, y = "Number of occurrences") +
  facet_wrap(.~Age.3,scales = "free",nrow = 1) +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='#53565A'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0)
        )

# Number of species per age.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3) |> 
  summarize(n = n_distinct(Species)) |> 
  ggplot(aes(x = Age.3, y = n)) +
  geom_col() +
  labs(x = "Age", y = "Number of species") +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='#53565A'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1)
        )

# Number of genera per age.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3) |> 
  summarize(n = n_distinct(Genus)) |> 
  ggplot(aes(x = Age.3, y = n)) +
  geom_col() +
  labs(x = "Age", y = "Number of genera") +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='#53565A'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1)
        )
```

## Biogeographic connectedness

```{r}
# Function.
BC <- function(taxon_unit, sites) {
  O <- length(taxon_unit)
  N <- length(unique(taxon_unit))
  L <- length(unique(sites))
  return((O-N)/((L*N)-N))
}

clean_spatial_data |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3) |> 
  summarize(
    BC = BC(Species, cell),
    count_occurrences = n(),
    count_unique_species = n_distinct(Species)
  ) |> 
  # Visualize:
  ggplot(aes(x = Age.3, y = BC, fill = Age.3)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values =   c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  scale_colour_manual(values = c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +  
  coord_flip() +
  theme_minimal() +
  labs(x = NULL) +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 8),
        strip.text = element_text(face = "bold"),
        legend.position = "none",
        aspect.ratio = 1)
```

## Spatial binning

```{r}
unzip(file.path(system.file(package="rgplates"), "extdata/paleomap_v3.zip"), exdir=tempdir())
pathToPolygons  <- file.path(tempdir(), "PALEOMAP_PlatePolygons.gpml")
pathToRotations <- file.path(tempdir(), "PALEOMAP_PlateModel.rot")

pm <- platemodel(
  features = c("static_polygons" = pathToPolygons),
  rotation = pathToRotations
)

# Plot.
plates_campanian <- reconstruct("static_polygons", age= 77.75, model =pm)  # Campanian
plates_maastrichtian <- reconstruct("static_polygons", age= 69, model =pm) # Maastrichtian
plates_danian <- reconstruct("static_polygons", age= 62.5, model =pm)      # Danian
plates_thanetian <- reconstruct("static_polygons", age= 57.5, model =pm)   # Thanetian

# Transform plates to Mollweide projection.

# Campanian.
plot(hexa,table(clean_spatial_data[clean_spatial_data$Age.3 == "Campanian",]$cell),
     crs ="ESRI:54009",
     border = "#53565A",
     reset=FALSE)

plot(sf::st_transform(plates_campanian, "ESRI:54009")$geometry, add = TRUE,border= NA, col = "#66666688")

# Maastrichtian.
plot(hexa,table(clean_spatial_data[clean_spatial_data$Age.3 == "Maastrichtian",]$cell),
     crs ="ESRI:54009",
     border = "#53565A",
     reset=FALSE)

plot(sf::st_transform(plates_maastrichtian, "ESRI:54009")$geometry, add = TRUE,border= NA, col = "#66666688")

# Danian-Selandian.
plot(hexa,table(clean_spatial_data[clean_spatial_data$Age.3 == "DanSelCombined",]$cell),
     crs ="ESRI:54009",
     border = "#53565A",
     reset=FALSE)

plot(sf::st_transform(plates_danian, "ESRI:54009")$geometry, add = TRUE,border= NA, col = "#66666688")

# Thanetian.
plot(hexa,table(clean_spatial_data[clean_spatial_data$Age.3 == "Thanetian",]$cell),
     crs ="ESRI:54009",
     border = "#53565A",
     reset=FALSE)

plot(sf::st_transform(plates_thanetian, "ESRI:54009")$geometry, add = TRUE,border= NA, col = "#66666688")
```

```{r}
# Order-level composition per cell?
clean_spatial_data |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3,cell,Order) |> 
  count() |> 
  ggplot(mapping = aes(x = cell, y = n, fill = Order)) +
  geom_bar(stat = "identity") +
  facet_wrap(.~Age.3,scales = "free")

# Number of species per cell?
clean_spatial_data |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3,cell) |> 
  summarize(n = n_distinct(Species)) |> 
  ggplot(mapping = aes(x = cell, y = n)) +
  geom_bar(stat = "identity") +
  labs(title = "Number of species per cell") +
  facet_wrap(.~Age.3,scales = "free")
```

## Subsampling routine

```{r}
split_by_age <- function(data, age) {
  data |>
    filter(Age.3 == age) |>
    group_split(cell_id) |>
    lapply(as.data.frame)
}

# Data splitting based on cell-ID and stage.
campanian_split <- split_by_age(data = clean_spatial_data,age = "Campanian")
maastrichtian_split <- split_by_age(data = clean_spatial_data,age = "Maastrichtian")
danian_split <- split_by_age(data = clean_spatial_data,age = "DanSelCombined")
thanetian_split <- split_by_age(data = clean_spatial_data,age = "Thanetian")
```

```{r}
# Function.
boot_age <- function(x, n_boot = NULL, n_strata = NULL, n_per_stratum = NULL) {
  purrr::map(1:n_boot, ~ {
    x |> sample(n_strata, replace = FALSE) |> 
      purrr::map(~ sample_n(.x, n_per_stratum, replace = FALSE))
  })
}

# Campanian
set.seed(1)
boot_campanian <- boot_age(x = campanian_split,n_boot = 999,n_strata = 5,n_per_stratum = 15)
# Maastrichtian.
set.seed(2)
boot_maastrichtian <- boot_age(x = maastrichtian_split,n_boot = 999,n_strata = 5,n_per_stratum = 15)
# Danian-Selandian.
set.seed(3)
boot_danian <- boot_age(x = danian_split,n_boot = 999,n_strata = 5,n_per_stratum = 15)
# Thanetian.
set.seed(4)
boot_thanetian <- boot_age(x = thanetian_split,n_boot = 999,n_strata = 5,n_per_stratum = 15)

# Function.
combine_boot_lists <- function(x) {
  result <- vector("list", length(x))
  for (i in seq_along(x)) {
    result[[i]] <- purrr::map_dfr(x[[i]], bind_rows)
  }
  result
}

combined_cam <- combine_boot_lists(x = boot_campanian)
combined_mas <- combine_boot_lists(x = boot_maastrichtian)
combined_dan <- combine_boot_lists(x = boot_danian)
combined_tha <- combine_boot_lists(x = boot_thanetian)

# Functions.
taxa_occurence_cell <- function(combined_data) {
 purrr::map(combined_data, ~ .x |> group_by(cell,Species,Genus) |> summarise(occs_species = n(),occs_genera = n(), .groups = 'drop')) |> 
  lapply(as.data.frame) |> 
  bind_rows()
}

# Determine the number of unique cells.
distinct_cells <- function(data) {
  tibble(unique(data$cell)) |> setNames(nm = "x") |> 
  mutate(n_part = as.numeric(sub("F", "", x))) |> 
  arrange(n_part) |> 
  pull(x)
}

camp_cells <- distinct_cells(data = taxa_occurence_cell(combined_cam))
mass_cells <- distinct_cells(data = taxa_occurence_cell(combined_mas))
dani_cells <- distinct_cells(data = taxa_occurence_cell(combined_dan))
than_cells <- distinct_cells(data = taxa_occurence_cell(combined_tha))

# Distinct cell pairs.
cells_distinct_pair <- function(data_x1,data_x2) {
  expand.grid(data_x1,data_x2,stringsAsFactors = F) |> 
  setNames(nm = c("x","y")) |> 
  filter(x<y) |> 
  as_tibble()
}

cdp <- cells_distinct_pair(data_x1 = camp_cells,data_x2 = camp_cells)
mdp <- cells_distinct_pair(data_x1 = mass_cells,data_x2 = mass_cells)
ddp <- cells_distinct_pair(data_x1 = dani_cells,data_x2 = dani_cells)
tdp <- cells_distinct_pair(data_x1 = than_cells,data_x2 = than_cells)
```

## Jaccard similarity

```{r message=FALSE}
jaccard_similarity <- function(x, group_col) {

  js_table <- list()
  
  for (k in seq_along(x)) {
    unique_cells <- unique(x[[k]]$cell)
    
    jaccard_similarity_table <- data.frame(
      cell_x = character(),
      cell_y = character(),
      jaccard_similarity = numeric(),
      stringsAsFactors = FALSE
    )
    
    for (i in seq_along(unique_cells)) {
      cell_x <- unique_cells[i]
      unique_names_cell_x <- unique(x[[k]][[group_col]][x[[k]]$cell == cell_x])
      
      for (j in seq_along(unique_cells)) {
        cell_y <- unique_cells[j]
        
        if (cell_x == cell_y || cell_x > cell_y) next
        
        unique_names_cell_y <- unique(x[[k]][[group_col]][x[[k]]$cell == cell_y])
        intersection <- length(generics::intersect(unique_names_cell_x, unique_names_cell_y))
        union_length <- length(generics::union(unique_names_cell_x, unique_names_cell_y))
        jaccard_similarity <- intersection / union_length
        
        jaccard_similarity_table <- rbind(jaccard_similarity_table, data.frame(
          cell_x = cell_x,
          cell_y = cell_y,
          jaccard_similarity = jaccard_similarity,
          stringsAsFactors = FALSE
        ))
      }
    }
    
    js_table[[k]] <- jaccard_similarity_table 
  }
  
  return(js_table)
}

# Campanian.
cmp_jaccard_species <- jaccard_similarity(x = combined_cam,group_col = "Species")
# Maastrichtian.
mas_jaccard_species <- jaccard_similarity(combined_mas,group_col = "Species")
# Danian/Selandian.
dan_jaccard_species <- jaccard_similarity(combined_dan,group_col = "Species")
# Thanetian.
tha_jaccard_species <- jaccard_similarity(combined_tha,group_col = "Species")

# Campanian.
cmp_jaccard_genera <- jaccard_similarity(x = combined_cam,group_col = "Genus")
# Maastrichtian.
mas_jaccard_genera <- jaccard_similarity(combined_mas,group_col = "Genus")
# Danian/Selandian.
dan_jaccard_genera <- jaccard_similarity(combined_dan,group_col = "Genus")
# Thanetian.
tha_jaccard_genera <- jaccard_similarity(combined_tha,group_col = "Genus")

# Average similarity for each cell-pair and stage.
mean_jaccard <- function(x) {
  bind_rows(x) |>
  group_by(cell_x, cell_y) |> 
  summarise(avg_jaccard = mean(jaccard_similarity)) |> 
  rename("x.cell" = "cell_x", "y.cell" = "cell_y") 
  }
```

## Great Circle Distance

```{r}
# Function.
gcd.slc <- function(long1, lat1, long2, lat2) {
  R <- 6371
  long1.r <- long1*pi/180
  long2.r <- long2*pi/180
  lat1.r <- lat1*pi/180
  lat2.r <- lat2*pi/180
  d <- acos(sin(lat1.r)*sin(lat2.r) + cos(lat1.r)*cos(lat2.r) * cos(long2.r-long1.r)) * R
  return(d) 
}

# Function.
matrix_results <- function(x) {
  x |> 
  # X-coordinates.
  left_join(clean_spatial_data |> select(cell,long,lat), by = c("x" = "cell"),relationship = "many-to-many") |> 
  distinct(x,y,long,lat) |> 
  rename("x_long" = "long","x_lat" = "lat") |> 
  # Y-coordinates.
  left_join(clean_spatial_data |> select(cell,long,lat), by = c("y" = "cell"),relationship = "many-to-many") |> 
  distinct(x,y,x_long,x_lat,long,lat) |> 
  # Rename variables.
  rename("y_long" = "long","y_lat" = "lat") |> 
  # GCD.
  mutate(gcd = gcd.slc(long1 = x_long,lat1 = x_lat,long2 = y_long,lat2 = y_lat)) |> 
  as.data.frame()
}

# Pair-wise cells along with corresponding coordinates and GCD.
cmp_matrix <- matrix_results(x = cdp)
mas_matrix <- matrix_results(x = mdp)
dan_matrix <- matrix_results(x = ddp)
tha_matrix <- matrix_results(x = tdp)
```

## Visualize results

```{r message=FALSE,warning=FALSE}
# Function.
adjust_matrix <- function(x,y) {
  x |> 
  rename("x.cell" = "x","y.cell" = "y") |> 
  left_join(y,by = c("x.cell","y.cell")) 
  }
  
cmp_species_input <- adjust_matrix(x = cmp_matrix,y = mean_jaccard(x = cmp_jaccard_species))
mas_species_input <- adjust_matrix(x = mas_matrix,y = mean_jaccard(x = mas_jaccard_species))
dan_species_input <- adjust_matrix(x = dan_matrix,y = mean_jaccard(x = dan_jaccard_species))
tha_species_input <- adjust_matrix(x = tha_matrix,y = mean_jaccard(x = tha_jaccard_species))

cmp_genera_input <- adjust_matrix(x = cmp_matrix,y = mean_jaccard(x = cmp_jaccard_genera))
mas_genera_input <- adjust_matrix(x = mas_matrix,y = mean_jaccard(x = mas_jaccard_genera))
dan_genera_input <- adjust_matrix(x = dan_matrix,y = mean_jaccard(x = dan_jaccard_genera))
tha_genera_input <- adjust_matrix(x = tha_matrix,y = mean_jaccard(x = tha_jaccard_genera))

# Function.
add_cutdist<- function(df, new_col = "gcd") {
  df$cutdist <- cut(df[[new_col]],
                    breaks = c(0, 2000, 4000, 6000, 8000, 10000, 12000, 
                               14000, 16000, 18000, 20000), 
                    labels = c("0", "2000", "4000", "6000", "8000", 
                               "10000", "12000", "14000", "16000", "18000"),
                    include.lowest = TRUE)
  return(df)
} # Bin by distance between cells (GCD in km's)

cmp_species_binned <- add_cutdist(df = cmp_species_input,new_col = "gcd")
mas_species_binned <- add_cutdist(df = mas_species_input,new_col = "gcd")
dan_species_binned <- add_cutdist(df = dan_species_input,new_col = "gcd")
tha_species_binned <- add_cutdist(df = tha_species_input,new_col = "gcd")

cmp_genera_binned <- add_cutdist(df = cmp_genera_input,new_col = "gcd")
mas_genera_binned <- add_cutdist(df = mas_genera_input,new_col = "gcd")
dan_genera_binned <- add_cutdist(df = dan_genera_input,new_col = "gcd")
tha_genera_binned <- add_cutdist(df = tha_genera_input,new_col = "gcd")

# Function (average and standard deviation).
summary_statistics <- function(x) {
  x |> 
  group_by(cutdist) |> 
  summarise(
    # Jaccard.
    avg =  mean(avg_jaccard, na.rm = TRUE),
    sdev = sd(avg_jaccard, na.rm = TRUE),
    n = n(),
    se = sdev/sqrt(n),
    # Quantiles.
    first =  quantile(avg_jaccard,probs=0.05, na.rm = TRUE),
    second = quantile(avg_jaccard,probs=0.95, na.rm = TRUE)
  ) |> 
  mutate(cutdist = cutdist,
         cutdist = factor(cutdist,levels = c("0","2000","4000","6000","8000","10000","12000","14000","16000","18000","20000"))) |> 
  mutate(ci = se * qt(.95, n - 1), ci = as.numeric(ci)) |> 
  as.data.frame() |> suppressWarnings() 
  }

# Species-level analysis.
p1 <- 
  bind_rows(
  summary_statistics(x = cmp_species_binned) |> mutate(label = "Campanian"),
  summary_statistics(x = mas_species_binned) |> mutate(label = "Maastrichtian"),
  summary_statistics(x = dan_species_binned) |> mutate(label = "Danian"),
  summary_statistics(x = tha_species_binned) |> mutate(label = "Thanetian")
) |> 
  mutate(label = factor(label, levels = c("Campanian","Maastrichtian","Danian","Thanetian"))) |> 
# Plot.
  ggplot(aes(x = cutdist, y = avg, group = label, colour = label, fill = label)) +
  geom_errorbar(aes(ymin = second, ymax = first), width = 0.05, linewidth = 1, position = position_dodge(width = 0.3)) + 
  geom_line(linewidth = 1, position = position_dodge(width = 0.3)) +
  # scale_size_continuous(breaks = c(5, 10, 15, 20, 25, 30)) +
  scale_fill_manual(values =   c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  scale_colour_manual(values = c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  geom_point(aes(size = n),shape = 21,fill = "white",stroke = 1.5,position = position_dodge(width = 0.3)) +
  labs(x = "Great Circle Distance (km)", 
       y = "Similarity Value",
       title = "Species-level assessment",
       subtitle = "Subsampling by cells and occurrences", colour = "Stages", size = "Cell-pair comparison") +
  theme_classic() +
  theme(plot.title = element_text(face = "bold"),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(face = "bold"),
        aspect.ratio = 1)

# Genus-level analysis.
p2 <- 
  bind_rows(
  summary_statistics(x = cmp_genera_binned) |> mutate(label = "Campanian"),
  summary_statistics(x = mas_genera_binned) |> mutate(label = "Maastrichtian"),
  summary_statistics(x = dan_genera_binned) |> mutate(label = "Danian"),
  summary_statistics(x = tha_genera_binned) |> mutate(label = "Thanetian")
) |> 
  mutate(label = factor(label, levels = c("Campanian","Maastrichtian","Danian","Thanetian"))) |> 
# Plot.
  ggplot(aes(x = cutdist, y = avg, group = label, colour = label, fill = label)) +
  geom_errorbar(aes(ymin = second, ymax = first), width = 0.05, linewidth = 1, position = position_dodge(width = 0.3)) + 
  geom_line(linewidth = 1, position = position_dodge(width = 0.3)) +
  scale_fill_manual(values =   c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  scale_colour_manual(values = c("#C1C6CFFF","#180C18FF","#933450FF","#D99755FF")) +
  geom_point(aes(size = n),shape = 21,fill = "white",stroke = 1.5,position = position_dodge(width = 0.3)) +
  labs(x = "Great Circle Distance (km)", 
       y = "Similarity Value",
       title = "Genus-level assessment",
       subtitle = "Subsampling by cells and occurrences", colour = "Stages", size = "Cell-pair comparison") +
  theme_classic() +
  theme(plot.title = element_text(face = "bold"),
        axis.title = element_text(face = "bold"),
        legend.title = element_text(face = "bold"),
        aspect.ratio = 1)

ggarrange(p1,p2,ncol = 2,align = "hv",common.legend = T,legend = "right")
```
