---
title: "Increased cosmopolitanism in sharks in the wake of the end-Cretaceous mass extinction event"
title-block-banner: "#2E2D29"
title-block-banner-color: "#FFFFFF"
subtitle: "Supplementary Data:"
description: "Stanford Doer School of Sustainability, Paleobiology Lab"
date: last-modified
date-format: "YYYY-MM-DD"
mainfont: Figtree
sansfont: Georgia
footnotes-hover: true
reference-location: margin
lang: en
search: true
number-sections: false
crossref:
  chapters: true
author:
  - name: Mohamad Bazzi
    orcid: 0000-0002-9495-0781
    email: bazzi@stanford.edu
    url: https://github.com/mohabazzi
    affiliations:
      - name: Stanford University
        department: Department of Earth and Planetary Sciences
        address: CA 94305
        country: USA
        url: https://sustainability.stanford.edu/
highlight-style: pygments
fig-cap-location: top
lightbox: auto
format:
  stanford-quarto-html: default
other-links:
  - text: Custom Quarto Template
    icon: file-code
    href: https://github.com/mohabazzi/stanford-quarto
  - text: Docker image
    icon: file-code
    href: https://hub.docker.com/r/mohamadbazzi/aptian-image
code-links:
  - text: Github Repo
    icon: github
    href: https://github.com/mohabazzi/kpg-homogenization
editor_options: 
  chunk_output_type: console
---

## Packages

```{r message=FALSE, warning=FALSE}
rpkg <- c("dplyr ggplot2 readr boot divvy terra divDyn conflicted rgplates sf colorspace rgl RColorBrewer
           icosa tidyr tibble purrr downloadthis ggpubr openxlsx igraph Matrix RColorBrewer bipartite
           betapart rnaturalearth dispeRse")

import_pkg <- function(x)
  x |> trimws() |> strsplit("\\s+")  |> unlist() |> 
  lapply(function(x) library(x, character.only = T)) |> 
  invisible()

rpkg |> import_pkg()

# Resolve conflicted functions.
conflicted::conflict_prefer(name = "filter", winner = "dplyr",losers = "stats")
conflicted::conflicts_prefer(base::attr)
conflicted::conflicts_prefer(rgplates::reconstruct)
```

## Paleontological occurrence data

Fossil occurrence data for Late Cretaceous (Campanian-Maastrichtian) and Paleocene (Danian-Thanetian) sharks were compiled using the primary literature and specimens from museum collections. Data processing mainly involved standardizing genus and species spelling, but also updating nomenclature were appropriate. Unspecified species (i.e., sp) were not considered part of the analysis. We performed our analyses at both genus and species levels.The final cleaned occurrence dataset comprised **X** occurrences representing **X** species and **X** genera. Occurrence data were binned into chronostratigraphic ages.

Two datasets are analyzed separately: 1) occurrences at the species level and 2) occurrences at the genus level.

```{r}
# Occurrence Database.
Data <-
  read.xlsx(xlsxFile = "Data.xlsx") |> 
  filter(!Duplicate %in% c("x")) |> 
  filter(!View %in% c("oblique labial","oblique lingual")) |> 
  mutate(Locale = as.factor(Locale)) |> 
  mutate(Species = as.factor(Species)) |>
  # Squatiniformes.
  mutate(Species = case_when(Species == "Squatina cf. prima" ~ "Squatina prima", TRUE ~ Species)) |> 
  # Synechodontiformes.
  mutate(Species = case_when(Species == "Synechodus cf. faxensis" ~ "Synechodus faxensis",
                             Species == "Sphenodus cf. lundgreni" ~ "Sphenodus lundgreni", TRUE ~ Species)) |> 
  # Heterodontiformes.
  mutate(Species = case_when(Species == "Heterodontus granti nov. sp." ~ "Heterodontus granti", TRUE ~ Species)) |> 
  # Squaliformes.
  mutate(Species = case_when(Species == "Microetmopterus wardi gen. et sp. nov." ~ "Microetmopterus wardi",
                             Species == "Squalus gabrielsoni sp. nov." ~ "Squalus gabrielsoni",
                             Species == "Squalus huntensis nov. sp." ~ "Squalus huntensis", 
                             Species == "Centrophoroides cf. appendiculatus" ~ "Centrophoroides appendiculatus",TRUE ~ Species)) |> 
  # Hexanchiformes.
  mutate(Species = case_when(Species == "Heptranchias howellii" ~ "Heptranchias howelli",
                             Species == "Notidanodon brotzeni sp. nov." ~ "Notidanodon brotzeni",
                             Species == "Hexanchus aff. microdon" ~ "Hexanchus microdon",
                             Species == "Notidanodon cf. loozi" ~ "Notidanodon loozi", TRUE ~ Species)) |> 
  # Orectolobiformes.
  mutate(Species = case_when(Species == "Pararhincodon groessenssi" ~ "Pararhincodon groessensi",
                             Species == "Plicatoscyllium antiquum nov. gen. nov. sp." ~ "Plicatoscyllium antiquum",
                             Species == "Plicatoscyllium cf globidens" ~ "Plicatoscyllium globidens",
                             Species == "Galagadon nordquistae n. gen. n. sp." ~ "Galagadon nordquistae",
                             Species %in% c("Plicatoscyllium derameei nov. gen. nov. sp.","Plicatoscyllium deramei") ~ "Plicatoscyllium derameei",
                             Species %in% c("Cantioscyllium cf. meyeri ","Cantioscyllium aff. C. meyeri","Cantioscyllium meyeri nov. sp.") ~ "Cantioscyllium meyeri",TRUE ~ Species)) |>
  # Lamniformes.
  mutate(Species = case_when(Species == "Carcharias cf. C. holmdelensis" ~ "Carcharias holmdelensis",
                             Species == "Squalicorax africanus nov sp." ~ "Squalicorax africanus",
                             Species == "Anomotodon noves" ~ "Anomotodon novus",
                             Species == "Carcharias teretidens" ~ "Sylvestrilamia teretidens", # According to Guinot and Condamine 2023 (Dataset)
                             Species == "Squalicorax bassanii " ~ "Squalicorax bassanii",
                             Species == "Squalicorax pristodontus "  ~ "Squalicorax pristodontus",
                             Species == "Squalicorax benguerirensis nov. sp." ~ "Squalicorax benguerirensis",
                             Species == "speyeri" ~ "Odontaspis speyeri",
                             Species == "Odontaspis cf. winkleri" ~ "Odontaspis winkleri",
                             Species ==  "inflata" ~ "Isurolamna inflata",
                             Species == "obliquus" ~ "Otodus obliquus",
                             Species == "Squalicorax microserratus nov. sp." ~ "Squalicorax microserratus",
                             Species == "Cretolamna sp." ~ "Cretalamna sp.",
                             Species == "Lamna cuspidata" ~ "Carcharias cuspidatus", # Opinion of Hovestadt 2020.
                             Species == "Carcharias macrotus" ~ "Striatolamia macrota",
                             Species == "Odontaspis rutoti" ~ "Palaeohypotodus rutoti",  # Opinion of Ebersole et al. 2024.
                             Species == "Carcharodon orientalis" ~ "Palaeocarcharodon orientalis",
                             Species == "Anomotodon hermani sp. nov." ~ "Anomotodon hermani",
                             Species == "Squalicorax aff. S. lindstromi" ~ "Squalicorax lindstromi",
                             Species == "Archaeolamna kopingensis"  ~ "Archaeolamna kopingensis kopingensis",
                             Species == "Lamna biauriculata nigeriana nov. sub sp." ~ "Cretalamna nigeriana",
                             Species == "Cretalamna cf. C. borealis" ~ "Cretalamna borealis",
                             Species %in% c("Carcharias aff. C. tenuis" ,"tenuis") ~ "Carcharias tenuis",
                             Species %in% c("Squalicorax cf. S. yangaensis","Squalicorax aff. S. yangaensis") ~ "Squalicorax yangaensis",
                             Species %in% c("Anomotodon aff. A. plicatus","Anomotodon aff. plicatus") ~ "Anomotodon plicatus",
                             Species %in% c("Odontaspis bronni","Palaeohypotodus aff. bronni") ~ "Palaeohypotodus bronni",
                             Species %in% c("Cretalamna cf. C. biauriculata","Cretolamna biauriculata") ~ "Cretalamna biauriculata",
                             Species %in% c("Cretolamna cf. C. maroccana","Cretolamna maroccana") ~ "Cretalamna maroccana",
                             Species %in% c("Carcharias aff. gracilis","gracilis") ~ "Carcharias gracilis",
                             Species %in% c("Striatolamia cederstroemi sp. nov.","cederstroemi") ~ "Striatolamia cederstroemi",
                             Species %in% c("Cretolamna appendiculata", "Cretolamna sp. aff. Cretolamna appendiculata","Cretolamna cf. C. appendiculata") ~ "Cretalamna appendiculata",
                             Species %in% c("Cretalamna cf. C. sarcoportheta","Cretalamna sarcoportheta sp. nov.") ~ "Cretalamna sarcoportheta",
                             Species %in% c("Pseudocorax cf. P. affinis","Pseudocorax cf. affinis") ~ "Pseudocorax affinis",
                             Species %in% c("Anomotodon cf. A. toddi", "Anomotodon toddi nov. sp.") ~ "Anomotodon toddi",
                             Species %in% c("Carcharias cf. C. samhammeri", "Carcharias cf. samhammeri") ~ "Carcharias samhammeri",
                             Species %in% c("Carcharias cf. C. heathi", "Carcharias heathi nov. sp.") ~ "Carcharias heathi",TRUE ~ Species)) |>
  # Carcharhiniformes.
  mutate(Species = case_when(Species == "Paratriakis tenuis sp. nov." ~ "Paratriakis tenuis",
                             Species == "Premontreia (Oxyscyllium) subulidens" ~ "Premontreia subulidens",
                             Species == "Palaeogaleus aff. faujasi" ~ "Palaeogaleus faujasi",
                             Species == "Galeorhinus gomphorhiza" ~ "Khouribgaleus gomphorhiza",
                             Species == "Scyliorhinus ivagrantae nov. sp." ~ "Scyliorhinus ivagrantae",
                             Species == "Squatigaleus grandjeani nov. sp." ~ "Squatigaleus grandjeani",
                             Species == "Squatigaleus carinatus nov. sp." ~ "Squatigaleus carinatus",
                             Species == "Scyliorhinus carinatus sp. nov." ~ "Premontreia carinatus",
                             Species == "Palaeogaleus navarroensis nov. sp." ~ "Palaeogaleus navarroensis",
                             Species == "Scyliorhinus aff. cabindensis" ~ "Scyliorhinus cabindensis",
                             Species == "Tingaleus dakkai n. gen. et nov. sp." ~ "Tingaleus dakkai",
                             Species %in% c("Galeorhinus aff. girardoti","Galeorhinus cf. G. girardoti") ~ "Galeorhinus girardoti",
                             Species %in% c("indet.","Triakidae gen. et sp. indet.") ~ NA,
                             Species %in% c("‘Scyliorhinus’ biddlei", "“Scyliorhinus“ biddlei") ~ "Scyliorhinus biddlei",
                             Species %in% c("‘Scyliorhinus’ elongatus","“Scyliorhinus” elongatus") ~  "Scyliorhinus elongatus", T ~  Species)) |>
  # Correct family designation.
  mutate(Family = case_when(Genus == "Palaeohypotodus" ~ "Jaekelotodontidae", T ~ Family)) |> 
  # Correct genus.
  mutate(Genus = case_when(Genus == "Cretolamna" ~ "Cretalamna",
                           Genus == "Paraorthocodus" ~ "Paraorthacodus", T ~ Genus))

# 51 occurrences from the Limhamn quarry that needs to be ID.

# Remove unspecified species.
remove_obs <- c("Squalicorax sp.","Squalicorax nov. sp. 2","Squalicorax nov. sp. 1",
                "Scyliorhinus sp. 1","Scyliorhinus sp. 2","Scyliorhinus sp. 2", "Scyliorhinus sp. 1",
                "Scapanorhynchus sp. 2","Scapanorhynchus sp. 1","Scapanorhynchus sp.","Protosqualus sp.",
                "Propristiophorus sp.","Plicatoscyllium sp.","Physogaleus sp.","Paratriakis sp.",
                "Pararhincodon sp.","Paraorthocodus sp.","Paraorthacodus sp.", "Paranomotodon sp.",
                "Palaeogaleus sp. B","Palaeogaleus sp.","Palaeobrachaelurus sp.","Odontaspis sp." ,"Notorynchus sp.",
                "Notidanodon sp.","Nebrius sp.","Megasqualus sp.","Isurolamna sp.","Hexanchus spp.","Hexanchus sp.",
                "Heterodontus sp. 2", "Heterodontus sp.","Heptranchias sp.","Gladioserratus sp.","Ginglymostoma sp.", 
                "Galeorhinus sp.","Foumtizia sp.","Echinorhinus sp.","Dalatias sp.","Cretalamna sp.","Cretalamna sp.", 
                "Columbusia sp.", "Chlamydoselachus sp.","Chiloscyllium sp.","Centrophorus sp.", "Carcharias sp.", "Brachycarcharias sp.",
                "Abdounia sp.","Woellsteinia sp.","Weltonia sp.","Triakis n. sp.","Squatina sp.","Squaliodalatias sp.",
                "sp. nov.","sp. nov. A","sp. nov. B", "Hemiscyllium sp.","Premontreia (Oxyscyllium) sp","Triakis sp.",
                "Palaeohypotodus sp.","Hologinglymostoma sp.","Palaeogaleus sp.")

Data <- Data |> filter(!Species %in% remove_obs)

# Final subset (remove occurrences with no species identification)
Data <-
  Data |> 
  filter(!is.na(Species)) |>
  filter(!is.na(Age.3)) |> 
  # Remove invalid taxa.
  filter(!Species %in% c("Palaeohypotodus rutori")) |>  # Not valid according (Ebersole et al. 2024).
  # Final corrections.
  mutate(Species = case_when(Species == "Isurolamna inflata" ~ "Isurolamna affinis", T ~ Species)
         ) |>  # (see Popov and Vladimir A. Lopyrev 2024).
  as.data.frame() |>
  # Remove columns.
  select(-c("Used","Duplicate","Not_Digitized","Age.2","Age.PD")) # 2429 occurrences with species names.
```

## Paleocoordinates

We used the present-day coordinates (i.e. latitude and longitude) of fossil localities/areas to reconstruct their corresponding paleocoordinates. This was achieved using the `rgplates` v. 0.6.0 R package and we opted to use the midpoint of each chronostratigraphic intervals.

```{r}
age_split <- 
  Data |> 
  group_by(Age.3) |> 
  group_split()

# Paleocoordinates.
campan_coords <- reconstruct(x = age_split[[1]][,19:20] |> relocate(Latitude,.after = "Longitude"),age = 77.9)  # Campanian
maastr_coords <- reconstruct(x = age_split[[3]][,19:20] |> relocate(Latitude,.after = "Longitude"),age = 69.1)  # Maastrichtian
danian_coords <- reconstruct(x = age_split[[2]][,19:20] |> relocate(Latitude,.after = "Longitude"),age = 62.62) # Danian-Selandian.
thanet_coords <- reconstruct(x = age_split[[4]][,19:20] |> relocate(Latitude,.after = "Longitude"),age = 57.62) # Thanetian

# Append paleocoordinates.
spatial_data <-
  rbind(
  cbind(age_split[[1]],campan_coords),
  cbind(age_split[[3]],maastr_coords),
  cbind(age_split[[2]],danian_coords),
  cbind(age_split[[4]],thanet_coords)
) |> 
  # Add numeric stage variable.
  mutate(stg = NULL) |>
  mutate(stg = case_when(Age.3 == "Campanian" ~ "80",
                         Age.3 == "Maastrichtian" ~ "81",
                         Age.3 == "DanSelCombined" ~ "82",
                         Age.3 %in% c("Thanetian") ~ "83",T ~ Age.3)
  ) |> 
  mutate(stg = as.numeric(stg))
```

## Exploratory data analysis

```{r}
# Number of occurrences by country.
spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Country,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Country, y = n, fill = Age.3)) + 
  geom_col() +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  coord_flip() +
  labs(x = NULL, y = "Sample size", fill = "Chronostratigraphic age", title = "Fossil occurrences by country") +
  theme_bw() +
  theme(panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='gray50'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0,face = "bold"),
        aspect.ratio = 1,
        axis.text  = element_text(size = 8),
        plot.title = element_text(face = "bold"),
        axis.title = element_text(face = "bold"))

# Number of occurrences by source.
spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  # Add new column (source type)
  # mutate(source_type = NULL) |>
  # mutate(source_type = "Literature") |> 
  # mutate(source_type = case_when(Source %in% c("WAM Collection","AMNH Collection","D. Ward collection") ~ "Museum collection",T ~ source_type)) |> 
  mutate(Source = case_when(Source == "D. Ward collection" ~ "NHM Collection", T ~ Source)) |> 
  mutate(Source = factor(Source, levels = c("WAM Collection","AMNH Collection","NHM Collection", 
                                             setdiff(sort(unique(Source)), c("WAM Collection","AMNH Collection","NHM Collection"))))) |> 
  group_by(Source,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Source, y = n, fill = Age.3)) + 
  geom_col() +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  coord_flip() +
  geom_vline(xintercept = 3.5) +
  labs(x = NULL, y = "Sample size", fill = "Chronostratigraphic age",title = "Fossil occurrences by source type",
       subtitle = "Collections vs. Literature") +
  theme_bw() +
  theme(panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='gray50'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0,face = "bold"),
        aspect.ratio = 1.5,
        legend.title = element_text(face = "bold"),
        axis.text  = element_text(size = 6),
        plot.title = element_text(face = "bold"),
        axis.title = element_text(face = "bold"))

# Number of occurrences by order.
spatial_data |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Order,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Order, y = n, fill = Order)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(x = NULL, y = "Sample size",title = "Fossil occurrences by taxonomic hierarchy",subtitle = "Selachian orders") +
  facet_wrap(.~ Age.3, scales = "free") +
  theme_bw() +
  theme(panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='gray50'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0,face = "bold"),
        aspect.ratio = 1.5,
        axis.text  = element_text(size = 6),
        plot.title = element_text(face = "bold"),
        axis.title = element_text(face = "bold"))

# Number of occurrences by species.
spatial_data |> 
  filter(Superorder == "Galeomorphii") |> 
  filter(Order %in% c("Lamniformes","Carcharhiniformes")) |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  mutate(Order = factor(Order, levels = c("Lamniformes","Carcharhiniformes"))) |> 
  group_by(Species,Order,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Species, y = n, fill = Age.3)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  coord_flip() +
  labs(x = NULL, y = "Sample Size", fill = "Chronostratigraphic age") +
  facet_wrap(.~ Order, scales = "free",ncol = 2) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 6),
        axis.text.y = element_text(face = "italic"),
        strip.text = element_text(hjust=0,face = "bold"),
        legend.position = "bottom",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 6),
        legend.key.width =  unit(3, "mm"),
        legend.key.height = unit(3, "mm"),
        aspect.ratio = 1.5)

spatial_data |> 
  filter(Superorder == "Squalomorphii") |> 
  filter(!Order %in% c("Lamniformes","Carcharhiniformes")) |> 
  filter(Order %in% c("Squaliformes","Hexanchiformes")) |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Species,Order,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Species, y = n, fill = Age.3)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) + 
  coord_flip() +
  labs(x = NULL, y = "Sample Size") +
  facet_wrap(.~ Order, scales = "free",ncol = 2) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 6),
        axis.text.y = element_text(face = "italic"),
        strip.text = element_text(hjust=0,face = "bold"),
        legend.position = "bottom",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 6),
        legend.key.width =  unit(3, "mm"),
        legend.key.height = unit(3, "mm"),
        aspect.ratio = 1.5)

spatial_data |> 
  filter(Superorder == "Squalomorphii") |> 
  filter(!Order %in% c("Lamniformes","Carcharhiniformes")) |> 
  filter(!Order %in% c("Squaliformes","Hexanchiformes")) |>   
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Species,Order,Age.3) |> 
  count() |> 
  ggplot(mapping = aes(x = Species, y = n, fill = Age.3)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) + 
  coord_flip() +
  labs(x = NULL, y = "Sample Size") +
  facet_wrap(.~ Order, scales = "free",ncol = 2) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 6),
        axis.text.y = element_text(face = "italic"),
        strip.text = element_text(hjust=0,face = "bold"),
        legend.position = "bottom",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 6),
        legend.key.width =  unit(3, "mm"),
        legend.key.height = unit(3, "mm"),
        aspect.ratio = 1.5)
```

## North America

```{r}
# Plot data.
ne_countries(continent = "North America", returnclass = "sf") |> 
ggplot() +
  geom_sf(fill = "#FFFBED") +
  geom_point(
    data = 
      Data |> 
      filter(Continent == "North America") |> 
      # filter(Country == "U.S.A") |> 
      mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","DanSelCombined","Thanetian"))),
    aes(x = Longitude, y = Latitude, group = NULL, color = Age.3),shape = 19,size = 3.5) +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  theme(panel.background = element_rect(fill = "aliceblue"),
        legend.position = 'bottom')

# Create a separate cell-grid division for North American occurrences. Will serve as a sensitivity test.
north_america_hexa <- hexagrid(deg = 1, sf = TRUE)

# North America Data
north_america_data <-
  rbind(
  # Campanian.
  spatial_data |>
  filter(Age.3 == "Campanian" & Continent == "North America") |> 
  mutate(cell = locate(x = north_america_hexa,
                       y = spatial_data |> filter(Age.3 == "Campanian" & Continent == "North America") |> select("paleolong", "paleolat"))),
  # Maastrichtian.
  spatial_data |> 
  filter(Age.3 == "Maastrichtian" & Continent == "North America") |> 
  mutate(cell = locate(x = north_america_hexa,
                       y = spatial_data |> filter(Age.3 == "Maastrichtian" & Continent == "North America")  |> select("paleolong", "paleolat"))), 
  # Danian/Selandian.
  spatial_data |> 
  filter(Age.3 == "DanSelCombined" & Continent == "North America") |> 
  mutate(cell = locate(x = north_america_hexa,
                       y = spatial_data |> filter(Age.3 == "DanSelCombined" & Continent == "North America")  |> select("paleolong", "paleolat"))),
  # Thanetian.
  spatial_data |> 
  filter(Age.3 == "Thanetian" & Continent == "North America") |> 
  mutate(cell = locate(x = north_america_hexa,
                       y = spatial_data |> filter(Age.3 == "Thanetian" & Continent == "North America")  |> select("paleolong", "paleolat")))
)

nrow(north_america_data) # 739

north_america_data |> 
  group_by(Age.3,cell) |> 
  count() |> 
  ggplot(aes(x = cell, y = n)) +
  geom_col() +
  facet_wrap(.~ Age.3, scales = "free", nrow = 1) +
  theme(aspect.ratio = 1.5)

```

## Cells

We first assigned fossil occurrences to equal-area spatial grid cells and retained only those with sufficient sampling (i.e., at a minimum occurrence-level of 10). First, the occurrence data were filtered to include only records from a specified geologic time-interval. Each occurrence was then assigned to a spatial grid cell using the `icosa v. 0.11.1` R package and a pre-defined hexagonal equal-area grid object. We calculated the number of occurrences per cell and retained only those with at least a minimum number of records to reduce the influence of undersampled areas. Finally, we extracted the geographic centroids of the retained cells and merged this information back into the dataset to support downstream spatial analysis.

```{r message=FALSE, warning=FALSE, results='hide'}
# Set up the grid,
hexa <- hexagrid(deg = 3.5, sf = TRUE) # The mean grid edge length is 403.97 km or 3.63 degrees.

clean_spatial_data <-
  rbind(
  # Campanian.
  spatial_data |>
  filter(Age.3 == "Campanian") |> 
  mutate(cell = locate(x = hexa,y = spatial_data[spatial_data$Age.3 == "Campanian",] |> select("paleolong", "paleolat"))),
  # Maastrichtian.
  spatial_data |> 
  filter(Age.3 == "Maastrichtian") |> 
  mutate(cell = locate(x = hexa,y = spatial_data[spatial_data$Age.3 == "Maastrichtian",] |> select("paleolong", "paleolat"))), 
  # Danian/Selandian.
  spatial_data |> 
  filter(Age.3 == "DanSelCombined") |> 
  mutate(cell = locate(x = hexa,y = spatial_data[spatial_data$Age.3 == "DanSelCombined",] |> select("paleolong", "paleolat"))),
  # Thanetian.
  spatial_data |> 
  filter(Age.3 == "Thanetian") |> 
  mutate(cell = locate(x = hexa,y = spatial_data[spatial_data$Age.3 == "Thanetian",] |> select("paleolong", "paleolat")))
)


# Count occurrences per cell and age.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(cell,Age.3) |> count() |> 
  ggplot(aes(x = cell, y = n)) +
  geom_col() +
  labs(x = NULL, y = "Number of occurrences") +
  facet_wrap(.~Age.3,scales = "free",nrow = 2) +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        panel.grid=element_line(linetype=3,linewidth=0.2),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0)
        )

# Filter.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(cell,Age.3) |> count() |> 
  arrange(desc(n)) |>
  filter(n >= 10) |> # Run sensitivity test here.
  ggplot(aes(x = cell, y = n)) +
  geom_col() +
  geom_hline(yintercept = 10,colour = "#D83853") +
  labs(x = NULL, y = "Number of occurrences",title = "Minimum quota for sampling per cell",subtitle = "10 occurrences") +
  facet_wrap(.~Age.3,scales = "free",nrow = 2) +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        plot.title = element_text(face = "bold"),
        panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='#53565A'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0)
        )

# Filter and spatially bin the data.
cell_preparation <- function(data,age,hexa,min_occ = NULL) {
  # Subset by age.
  data <- data |> filter(Age.3 == age)
  # Assign cell-units based on the coordinates.
  data <- data |> mutate(cell = icosa::locate(x = hexa,y = data |> select("paleolong","paleolat")))
  # Count occurrences per cell and filter by minimum occurrence.
  data <- 
    data |>
    group_by(cell) |>
    mutate(occs = n()) |> 
    ungroup() |> 
    filter(occs >= min_occ)
  
  # Retained cells.
  cells_to_keep <- unique(data$cell)
  cell_centroids <- 
    as.data.frame(centers(hexa))[cells_to_keep, , drop = FALSE] |>
    rownames_to_column(var = "cell")
  
  # Merge centroid-value.
  data <- data |> left_join(cell_centroids, by = "cell")
  
  return(data)
}

# Cell assignment and remove occurrence below the minimum thresh-hold.
campanian_cells <- cell_preparation(data = clean_spatial_data,age = "Campanian",hexa = hexa, min_occ = 10)
maastrich_cells <- cell_preparation(data = clean_spatial_data,age = "Maastrichtian",hexa = hexa,min_occ = 10) 
daniansel_cells <- cell_preparation(data = clean_spatial_data,age = "DanSelCombined",hexa = hexa,min_occ = 10)
thanetian_cells <- cell_preparation(data = clean_spatial_data,age = "Thanetian",hexa = hexa,min_occ = 10)

# Combine all data subsets.
clean_spatial_data <- bind_rows(campanian_cells,maastrich_cells,daniansel_cells,thanetian_cells) # 2350 specimens in total.
# Create unique identifier for each cell.
clean_spatial_data <-
  data.frame(unique(clean_spatial_data$cell)) |> # 30 unique cells.
  setNames(nm = "cell") |> 
  mutate(cell_id = c(1:length(cell))) |> 
  inner_join(clean_spatial_data, 
             by = "cell")

# Number of species per age.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3) |> 
  summarize(n = n_distinct(Species)) |> 
  ggplot(aes(x = Age.3, y = n)) +
  geom_col() +
  labs(x = "Age", y = "Number of species",title = "Richness across the K/Pg boundary") +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        plot.title = element_text(face = "bold"),
        panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='#53565A'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1)
        )

# Number of genera per age.
clean_spatial_data |>
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3) |> 
  summarize(n = n_distinct(Genus)) |> 
  ggplot(aes(x = Age.3, y = n)) +
  geom_col() +
  labs(x = "Age", y = "Number of genera",title = "Richness across the K/Pg boundary") +
  theme_bw() +
  theme(aspect.ratio = 1.5,
        plot.title = element_text(face = "bold"),
        panel.grid=element_line(linetype=3,linewidth=0.2, 
                                color='#53565A'),
        panel.grid.minor=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(hjust=0),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1)
        )
```

## Biogeographic connectedness

```{r}
# Presence-absence matrix of taxa in sites.
co_occurrence_matrix <- function(data,age) {
  data <- data |> filter(Age.3 == age)
  data |>
  distinct(cell,Species) |>
  mutate(presence = 1) |>
  pivot_wider(names_from = Species, values_from = presence, values_fill = 0) |>
  column_to_rownames("cell") |> 
  as.matrix() |> 
  t()
}

# Biogeographic connectedness (sensu Sidor et al.)
cmp_bc <- 
  co_occurrence_matrix(data = clean_spatial_data,age = "Campanian") |> 
  dispeRse::BC(tree = NULL,jackknife = TRUE,
               resample.replicates = 9999)

maa_bc <- 
  co_occurrence_matrix(data = clean_spatial_data,age = "Maastrichtian") |> 
  dispeRse::BC(tree = NULL,jackknife = TRUE,
               resample.replicates = 9999)

dan_bc <-
  co_occurrence_matrix(data = clean_spatial_data,age = "DanSelCombined") |> 
  dispeRse::BC(tree = NULL,jackknife = TRUE,
               resample.replicates = 9999)

tha_bc <- 
  co_occurrence_matrix(data = clean_spatial_data,age = "Thanetian") |>
  dispeRse::BC(tree = NULL,jackknife = TRUE,
               resample.replicates = 9999)

# 95% confidence intervals.
intervals <-  function(xvar,alpha=0.975) {
  mean<-mean(xvar)
  std<-sd(xvar)
  n<-length(xvar)
  ci.s.x<-sqrt((std^2)/n)
  pi.s.x<-std*sqrt(1+1/n)
  t<-qt(alpha,df=n-1)
  ci.uci<-mean+t*ci.s.x
  ci.lci<-mean-t*ci.s.x
  pi.uci<-mean+t*pi.s.x
  pi.lci<-mean-t*pi.s.x
  res<-as.list(c(round(mean,4),round(std,4),n,round(t,4),round(ci.lci,4),round(ci.uci,4),round(pi.lci,4),round(pi.uci,4)))
  names(res)<-c('mean','st.dev','N','t.stat','Lower.CI','Upper.CI','Lower.PI','Upper.PI')
  return(res)
}

rbind(
  intervals(xvar = cmp_bc$BC_resampled[,7])[c(1,7:8)],
  intervals(xvar = maa_bc$BC_resampled[,7])[c(1,7:8)],
  intervals(xvar = dan_bc$BC_resampled[,7])[c(1,7:8)],
  intervals(xvar = tha_bc$BC_resampled[,7])[c(1,7:8)]
) |> 
  as.data.frame() |> 
  mutate(age = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian")) |> 
  mutate(age = factor(age, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |> 
  mutate(stats = "95% PI") |> 
  rename("mean_bc" = "mean") |> 
  mutate(across(1:3, ~ as.numeric(.x))) |>
  # Visualize.
  ggplot(aes(x = age, y = mean_bc, colour = age)) + 
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = Lower.PI, ymax = Upper.PI), width = 0.2) +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  geom_vline(xintercept = 2.5,linetype = 2) +
  labs(y = "Biogeographic connectedness",x = NULL,title = "Jackknifing with 10,000 replicates") +
  theme_bw() +
  labs(x = NULL) +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 8),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1),
        axis.text.y = element_text(angle = 90,hjust = .5),
        strip.text = element_text(face = "bold"),
        legend.position = "none",
        aspect.ratio = 1.5)

# Spatially standardized with divvy.

```

## Spatial binning

```{r}
unzip(file.path(system.file(package="rgplates"), "extdata/paleomap_v3.zip"), exdir=tempdir())
pathToPolygons  <- file.path(tempdir(), "PALEOMAP_PlatePolygons.gpml")
pathToRotations <- file.path(tempdir(), "PALEOMAP_PlateModel.rot")

pm <- platemodel(
  features = c("static_polygons" = pathToPolygons),
  rotation = pathToRotations
)

colour <- c("#2A363BFF", "#019875FF", "#99B898FF", "#FECEA8FF", "#FF847CFF", "#E84A5FFF", "#C0392BFF", "#96281BFF")

biogeo_maps <- function(stage_name, plate_data, hexa_data, age_col, palette = colour) {
  # Plate polygons
  plot(st_transform(plate_data, "ESRI:54030")$geometry,
       col = '#53565A', border = NA, reset = FALSE)

  # Hexa plot with counts.
  plot(hexa_data,
       table(clean_spatial_data[clean_spatial_data[[age_col]] == stage_name, ]$cell),
       add = TRUE,
       crs = "ESRI:54030",
       border = "#0000FF08",
       pal = colour,
       reset = FALSE)

  # Stage label
  mtext(stage_name, side = 3, line = 0.5, font = 2)
}

# Reconstructed plates.
plates_list <- list(
  "Campanian" = reconstruct("static_polygons", age = 77.75, model = pm),
  "Maastrichtian" = reconstruct("static_polygons", age = 69, model = pm),
  "DanSelCombined" = reconstruct("static_polygons", age = 62.5, model = pm),
  "Thanetian" = reconstruct("static_polygons", age = 57.5, model = pm)
)

par(mfrow = c(2, 2), mar = c(0, 0, 2, 0))
for (i in names(plates_list)) {
  biogeo_maps(i, plates_list[[i]], hexa, "Age.3")
}
```

```{r}
# Order-level composition per cell?
clean_spatial_data |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3,cell,Order) |> 
  count() |> 
  ggplot(mapping = aes(x = cell, y = n, fill = Order)) +
  geom_bar(stat = "identity") +
  facet_wrap(.~Age.3,scales = "free")

# Number of species per cell?
clean_spatial_data |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  group_by(Age.3,cell) |> 
  summarize(n = n_distinct(Species)) |> 
  ggplot(mapping = aes(x = cell, y = n)) +
  geom_bar(stat = "identity") +
  labs(title = "Number of species per cell") +
  facet_wrap(.~Age.3,scales = "free")
```

```{r}
# Create latitude bands (e.g. every 10 degrees)
clean_spatial_data |> 
  mutate(Age.3 = case_when(Age.3 == "DanSelCombined" ~ "Danian-Selandian", T ~ Age.3)) |> 
  mutate(Age.3 = factor(Age.3, levels = c("Campanian","Maastrichtian","Danian-Selandian","Thanetian"))) |>
  mutate(lat_bin = cut(paleolat, breaks = seq(-90, 90, by = 10), include.lowest = TRUE)) |> 
  group_by(Age.3, lat_bin) |> 
  summarise(richness = n_distinct(Species), .groups = "drop") |> 
  ggplot(aes(x = lat_bin, y = richness,color = Age.3, group = Age.3)) +
  geom_line(linewidth = .5) +
  geom_point(size = 2, fill = "white", shape = 21) +
  theme_minimal() +
  labs(
    x = "Paleolatitude Band (°)",
    y = "Species Richness",
    fill = "Time Bin",
    title = "Latitudinal Richness Patterns Across the K–Pg Boundary"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        aspect.ratio = 1.5)
```

## Subsampling routine

```{r}
split_by_age <- function(data, age) {
  data |>
    filter(Age.3 == age) |>
    group_split(cell_id) |>
    lapply(as.data.frame)
}

# Data splitting based on cell-ID and stage.
campanian_split <- split_by_age(data = clean_spatial_data,age = "Campanian")
maastrichtian_split <- split_by_age(data = clean_spatial_data,age = "Maastrichtian")
danian_split <- split_by_age(data = clean_spatial_data,age = "DanSelCombined")
thanetian_split <- split_by_age(data = clean_spatial_data,age = "Thanetian")
```

```{r}
# Function.
boot_age <- function(x, n_boot = NULL, n_strata = NULL, n_per_stratum = NULL) {
  purrr::map(1:n_boot, ~ {
    x |> sample(n_strata, replace = FALSE) |> 
      purrr::map(~ sample_n(.x, n_per_stratum, replace = FALSE))
  })
}

# Campanian
set.seed(1)
boot_campanian <- boot_age(x = campanian_split,n_boot = 999,n_strata = 7,n_per_stratum = 10)
# Maastrichtian.
set.seed(2)
boot_maastrichtian <- boot_age(x = maastrichtian_split,n_boot = 999,n_strata = 7,n_per_stratum = 10)
# Danian-Selandian.
set.seed(3)
boot_danian <- boot_age(x = danian_split,n_boot = 999,n_strata = 7,n_per_stratum = 10)
# Thanetian.
set.seed(4)
boot_thanetian <- boot_age(x = thanetian_split,n_boot = 999,n_strata = 7,n_per_stratum = 10)

# Function.
combine_boot_lists <- function(x) {
  result <- vector("list", length(x))
  for (i in seq_along(x)) {
    result[[i]] <- purrr::map_dfr(x[[i]], bind_rows)
  }
  result
}

combined_cam <- combine_boot_lists(x = boot_campanian)
combined_mas <- combine_boot_lists(x = boot_maastrichtian)
combined_dan <- combine_boot_lists(x = boot_danian)
combined_tha <- combine_boot_lists(x = boot_thanetian)

# Functions.
taxa_occurence_cell <- function(combined_data) {
 purrr::map(combined_data, ~ .x |> group_by(cell,Species,Genus) |> summarise(occs_species = n(),occs_genera = n(), .groups = 'drop')) |> 
  lapply(as.data.frame) |> 
  bind_rows()
}

# Determine the number of unique cells.
distinct_cells <- function(data) {
  tibble(unique(data$cell)) |> setNames(nm = "x") |> 
  mutate(n_part = as.numeric(sub("F", "", x))) |> 
  arrange(n_part) |> 
  pull(x)
}

camp_cells <- distinct_cells(data = taxa_occurence_cell(combined_cam))
mass_cells <- distinct_cells(data = taxa_occurence_cell(combined_mas))
dani_cells <- distinct_cells(data = taxa_occurence_cell(combined_dan))
than_cells <- distinct_cells(data = taxa_occurence_cell(combined_tha))

# Distinct cell pairs.
cells_distinct_pair <- function(data_x1,data_x2) {
  expand.grid(data_x1,data_x2,stringsAsFactors = F) |> 
  setNames(nm = c("x","y")) |> 
  filter(x<y) |> 
  as_tibble()
}

cdp <- cells_distinct_pair(data_x1 = camp_cells,data_x2 = camp_cells)
mdp <- cells_distinct_pair(data_x1 = mass_cells,data_x2 = mass_cells)
ddp <- cells_distinct_pair(data_x1 = dani_cells,data_x2 = dani_cells)
tdp <- cells_distinct_pair(data_x1 = than_cells,data_x2 = than_cells)
```

## Jaccard similarity

```{r message=FALSE}
jaccard_similarity <- function(x, group_col) {

  js_table <- list()
  
  for (k in seq_along(x)) {
    unique_cells <- unique(x[[k]]$cell)
    
    jaccard_similarity_table <- data.frame(
      cell_x = character(),
      cell_y = character(),
      jaccard_similarity = numeric(),
      stringsAsFactors = FALSE
    )
    
    for (i in seq_along(unique_cells)) {
      cell_x <- unique_cells[i]
      unique_names_cell_x <- unique(x[[k]][[group_col]][x[[k]]$cell == cell_x])
      
      for (j in seq_along(unique_cells)) {
        cell_y <- unique_cells[j]
        
        if (cell_x == cell_y || cell_x > cell_y) next
        
        unique_names_cell_y <- unique(x[[k]][[group_col]][x[[k]]$cell == cell_y])
        intersection <- length(generics::intersect(unique_names_cell_x, unique_names_cell_y))
        union_length <- length(generics::union(unique_names_cell_x, unique_names_cell_y))
        jaccard_similarity <- intersection / union_length
        
        jaccard_similarity_table <- rbind(jaccard_similarity_table, data.frame(
          cell_x = cell_x,
          cell_y = cell_y,
          jaccard_similarity = jaccard_similarity,
          stringsAsFactors = FALSE
        ))
      }
    }
    
    js_table[[k]] <- jaccard_similarity_table 
  }
  
  return(js_table)
}

# Campanian.
cmp_jaccard_species <- jaccard_similarity(x = combined_cam,group_col = "Species")
# Maastrichtian.
mas_jaccard_species <- jaccard_similarity(combined_mas,group_col = "Species")
# Danian/Selandian.
dan_jaccard_species <- jaccard_similarity(combined_dan,group_col = "Species")
# Thanetian.
tha_jaccard_species <- jaccard_similarity(combined_tha,group_col = "Species")

# Campanian.
cmp_jaccard_genera <- jaccard_similarity(x = combined_cam,group_col = "Genus")
# Maastrichtian.
mas_jaccard_genera <- jaccard_similarity(combined_mas,group_col = "Genus")
# Danian/Selandian.
dan_jaccard_genera <- jaccard_similarity(combined_dan,group_col = "Genus")
# Thanetian.
tha_jaccard_genera <- jaccard_similarity(combined_tha,group_col = "Genus")
```

## Great Circle Distance

```{r}
# Function.
gcd.slc <- function(long1, lat1, long2, lat2) {
  R <- 6371
  long1.r <- long1*pi/180
  long2.r <- long2*pi/180
  lat1.r <- lat1*pi/180
  lat2.r <- lat2*pi/180
  d <- acos(sin(lat1.r)*sin(lat2.r) + cos(lat1.r)*cos(lat2.r) * cos(long2.r-long1.r)) * R
  return(d) 
}

# Function.
matrix_results <- function(x) {
  x |> 
  # X-coordinates.
  left_join(clean_spatial_data |> select(cell,long,lat), by = c("x" = "cell"),relationship = "many-to-many") |> 
  distinct(x,y,long,lat) |> 
  rename("x_long" = "long","x_lat" = "lat") |> 
  # Y-coordinates.
  left_join(clean_spatial_data |> select(cell,long,lat), by = c("y" = "cell"),relationship = "many-to-many") |> 
  distinct(x,y,x_long,x_lat,long,lat) |> 
  # Rename variables.
  rename("y_long" = "long","y_lat" = "lat") |> 
  # GCD.
  mutate(gcd = gcd.slc(long1 = x_long,lat1 = x_lat,long2 = y_long,lat2 = y_lat)) |> 
  as.data.frame()
}

# Pair-wise cells along with corresponding coordinates and GCD.
cmp_matrix <- matrix_results(x = cdp)
mas_matrix <- matrix_results(x = mdp)
dan_matrix <- matrix_results(x = ddp)
tha_matrix <- matrix_results(x = tdp)
```

## Visualize results

```{r message=FALSE,warning=FALSE}
# Average similarity for each cell-pair and stage.
mean_jaccard <- function(x) {
  bind_rows(x) |>
  group_by(cell_x, cell_y) |> 
  summarise(avg_jaccard = mean(jaccard_similarity)) |> 
  rename("x.cell" = "cell_x", "y.cell" = "cell_y") 
}

# Function.
adjust_matrix <- function(x,y) {
  x |> 
  rename("x.cell" = "x","y.cell" = "y") |> 
  left_join(y,by = c("x.cell","y.cell")) 
  }
  
cmp_species_input <- adjust_matrix(x = cmp_matrix,y = mean_jaccard(x = cmp_jaccard_species))
mas_species_input <- adjust_matrix(x = mas_matrix,y = mean_jaccard(x = mas_jaccard_species))
dan_species_input <- adjust_matrix(x = dan_matrix,y = mean_jaccard(x = dan_jaccard_species))
tha_species_input <- adjust_matrix(x = tha_matrix,y = mean_jaccard(x = tha_jaccard_species))

cmp_genera_input <- adjust_matrix(x = cmp_matrix,y = mean_jaccard(x = cmp_jaccard_genera))
mas_genera_input <- adjust_matrix(x = mas_matrix,y = mean_jaccard(x = mas_jaccard_genera))
dan_genera_input <- adjust_matrix(x = dan_matrix,y = mean_jaccard(x = dan_jaccard_genera))
tha_genera_input <- adjust_matrix(x = tha_matrix,y = mean_jaccard(x = tha_jaccard_genera))

# Function.
add_cutdist<- function(df, new_col = "gcd") {
  df$cutdist <- cut(df[[new_col]],
                    breaks = c(0, 2000, 4000, 6000, 8000, 10000, 12000, 
                               14000, 16000, 18000, 20000), 
                    labels = c("0", "2000", "4000", "6000", "8000", 
                               "10000", "12000", "14000", "16000", "18000"),
                    include.lowest = TRUE)
  return(df)
} # Bin by distance between cells (GCD in km's)

cmp_species_binned <- add_cutdist(df = cmp_species_input,new_col = "gcd")
mas_species_binned <- add_cutdist(df = mas_species_input,new_col = "gcd")
dan_species_binned <- add_cutdist(df = dan_species_input,new_col = "gcd")
tha_species_binned <- add_cutdist(df = tha_species_input,new_col = "gcd")

cmp_genera_binned <- add_cutdist(df = cmp_genera_input,new_col = "gcd")
mas_genera_binned <- add_cutdist(df = mas_genera_input,new_col = "gcd")
dan_genera_binned <- add_cutdist(df = dan_genera_input,new_col = "gcd")
tha_genera_binned <- add_cutdist(df = tha_genera_input,new_col = "gcd")

# Function (average and standard deviation).
summary_statistics <- function(x) {
  x |> 
  group_by(cutdist) |> 
  summarise(
    # Jaccard.
    avg =  mean(avg_jaccard, na.rm = TRUE),
    sdev = sd(avg_jaccard, na.rm = TRUE),
    n = n(),
    se = sdev/sqrt(n),
    # Quantiles.
    first =  quantile(avg_jaccard,probs=0.05, na.rm = TRUE),
    second = quantile(avg_jaccard,probs=0.95, na.rm = TRUE)
  ) |> 
  mutate(cutdist = cutdist,
         cutdist = factor(cutdist,levels = c("0","2000","4000","6000","8000","10000","12000","14000","16000","18000","20000"))) |> 
  mutate(ci = se * qt(.95, n - 1), ci = as.numeric(ci)) |> 
  as.data.frame() |> suppressWarnings() 
  }

# Species-level analysis.
p1 <- 
  bind_rows(
  summary_statistics(x = cmp_species_binned) |> mutate(label = "Campanian"),
  summary_statistics(x = mas_species_binned) |> mutate(label = "Maastrichtian"),
  summary_statistics(x = dan_species_binned) |> mutate(label = "Danian"),
  summary_statistics(x = tha_species_binned) |> mutate(label = "Thanetian")
) |> 
  mutate(label = factor(label, levels = c("Campanian","Maastrichtian","Danian","Thanetian"))) |> 
# Plot.
  ggplot(aes(x = cutdist, y = avg, group = label, colour = label, fill = label)) +
  geom_errorbar(aes(ymin = second, ymax = first), width = 0.05, linewidth = 1, position = position_dodge(width = 0.3)) + 
  geom_line(linewidth = 1, position = position_dodge(width = 0.3)) +
  # scale_size_continuous(breaks = c(5, 10, 15, 20, 25, 30)) +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) + 
  geom_point(aes(size = n),shape = 21,fill = "white",stroke = 1.5,position = position_dodge(width = 0.3)) +
  labs(x = "Great circle distance (km)", 
       y = "Similarity Value",
       title = "Species-level assessment",
       subtitle = "Subsampling by cells and occurrences", colour = "Age", fill = "Age",size = "Cell-pair comparison") +
  scale_y_continuous(expand = expansion(mult = c(0.02, 0.05))) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 12, hjust = 0),
    plot.subtitle = element_text(size = 10, hjust = 0),
    axis.title = element_text(face = "bold", size = 10),
    legend.title = element_text(face = "bold"),
    legend.position = "bottom",
    panel.grid.major = element_line(colour = "gray90"),
    panel.grid.minor = element_blank(),
    aspect.ratio = 1
  )

p1

# Genus-level analysis.
p2 <- 
  bind_rows(
  summary_statistics(x = cmp_genera_binned) |> mutate(label = "Campanian"),
  summary_statistics(x = mas_genera_binned) |> mutate(label = "Maastrichtian"),
  summary_statistics(x = dan_genera_binned) |> mutate(label = "Danian"),
  summary_statistics(x = tha_genera_binned) |> mutate(label = "Thanetian")
) |> 
  mutate(label = factor(label, levels = c("Campanian","Maastrichtian","Danian","Thanetian"))) |> 
# Plot.
  ggplot(aes(x = cutdist, y = avg, group = label, colour = label, fill = label)) +
  geom_errorbar(aes(ymin = second, ymax = first), width = 0.05, linewidth = 1, position = position_dodge(width = 0.3)) + 
  geom_line(linewidth = 1, position = position_dodge(width = 0.3)) +
  scale_fill_manual(values =   c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) +
  scale_colour_manual(values = c("#385581FF","#6DBAC6FF","#DAC190FF","#C9052CFF")) + 
  geom_point(aes(size = n),shape = 21,fill = "white",stroke = 1.5,position = position_dodge(width = 0.3)) +
  labs(x = "Great circle distance (km)", 
       y = "Similarity Value",
       title = "Genus-level assessment",
       subtitle = "Subsampling by cells and occurrences", colour = "Age", fill = "Age",size = "Cell-pair comparison") +
  scale_y_continuous(expand = expansion(mult = c(0.02, 0.05))) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    axis.title = element_text(face = "bold", size = 10),
    legend.title = element_text(face = "bold"),
    legend.position = "bottom",
    panel.grid.major = element_line(colour = "gray90"),
    panel.grid.minor = element_blank(),
    aspect.ratio = 1
  )

p2

# ggarrange(p1,p2,ncol = 2,align = "hv",common.legend = T,legend = "right")
```

## Bipartite network analysis

```{r}
# Function used to obtain species co-occurrence by stage.
# co_occurrence_matrix <- function(data,age) {
#   data <- data |> filter(Age.3 == age)
#   data |>
#   distinct(cell,Species) |>
#   mutate(presence = 1) |>
#   pivot_wider(names_from = Species, values_from = presence, values_fill = 0) |>
#   column_to_rownames("cell")
#   # as.matrix() |>
#   # t()
#   # tcrossprod() |>
#   # (\(m) { diag(m) <- 0; m })()
# 
#   }

# Plotting function.
# network_function <- function(occurrence_matrix,main,vertex.color){
#    gfam <- graph_from_adjacency_matrix(occurrence_matrix, mode = "undirected", weighted = TRUE)
#    par(mai=c(0,0,1,0)) 
#    plot(
#      gfam,
#      layout = layout_with_fr,
#      vertex.label.family = "sans",
#      vertex.size = 8,
#      vertex.shape = "circle",
#      vertex.color= vertex.color,
#      vertex.frame.color = adjustcolor("#544948", alpha.f = .5),
#      vertex.label = NA,
#      main = main,
#      vertex.label.cex = 1)
#    }


# Co-occurrence_matrix
# cmp_co_occur <- co_occurrence_matrix(data = clean_spatial_data,age = "Campanian")
# mas_co_occur <- co_occurrence_matrix(data = clean_spatial_data,age = "Maastrichtian")
# dan_co_occur <- co_occurrence_matrix(data = clean_spatial_data,age = "DanSelCombined")
# tha_co_occur <- co_occurrence_matrix(data = clean_spatial_data,age = "Thanetian")
# 
# plotweb()
# plotModuleWeb(moduleWebObject = computeModules(X))


# Plot the results.
# layout(matrix(c(1:4),nrow = 1,ncol = 4),respect = T)
# 
# network_function(occurrence_matrix = cmp_co_occur,main = "Campanian",vertex.color = "#385581FF")
# network_function(occurrence_matrix = mas_co_occur,main = "Maastrichtian",vertex.color = "#6DBAC6FF")
# network_function(occurrence_matrix = dan_co_occur,main = "Danian-Selandian",vertex.color = "#DAC190FF")
# network_function(occurrence_matrix = tha_co_occur,main = "Thanetian",vertex.color = "#C9052CFF")
```

## Turnover and nestedness

1. Define presence-absences matrix with grid cells (rows), taxa (column) and entries as 1 (present) or 0 (absent).

```{r}
# co_occurrence_matrix <- function(data,age) {
#   data <- data |> filter(Age.3 == age)
#   data |>
#   distinct(cell,Species) |>
#   mutate(presence = 1) |>
#   pivot_wider(names_from = Species, values_from = presence, values_fill = 0) |>
#   column_to_rownames("cell") |> 
#   # Turnover and nestedness component
#   beta.multi(index.family = "jaccard") |> 
#   data.frame() |> 
#   setNames(nm = c("Turnover","Nestedness","B-Diversity")
#            )
# }
# 
# co_occurrence_matrix(data = clean_spatial_data,age = "Campanian")
# co_occurrence_matrix(data = clean_spatial_data,age = "Maastrichtian")
# co_occurrence_matrix(data = clean_spatial_data,age = "DanSelCombined")
# co_occurrence_matrix(data = clean_spatial_data,age = "Thanetian")
```


